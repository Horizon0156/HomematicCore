@page "/devices"

@using HomematicCore.Homematic.Daemon
@using HomematicCore.Homematic.Daemon.Domain

@inject IHomematicDaemon HomematicDaemon

<h1> Devices </h1>

<table class="table table-sm">
    <thead>
        <tr>
            <th>Address</th>
            <th>Type</th>
            <th>InstalledFirmware</th>
        </tr>
    </thead>
    <tbody>
        
        @foreach (var device in LoadedDevices)
        {
            <tr @onclick="_ => ToogleDetails(device.Address)">
                <td>@device.Address</td>
                <td>@device.Type</td>
                <td>@device.InstalledFirmware @if (!device.IsUpdateAvailable) { <span class="badge badge-success">Up to date</span> } </td>
            </tr>
            <tr class="@(AreDetailsOpen(device.Address) ? "d-table-row" : "d-none")">
                <td>Child</td>
                <td>-</td>
                <td>-</td>
            </tr>
        }
    </tbody>
</table>

@code {

    private Dictionary<string, bool> _areDetailsOpenByDeviceAddress = new Dictionary<string, bool>();
    public IEnumerable<Device> LoadedDevices { get; set; }

    protected override Task OnInitializedAsync()
    {
        LoadedDevices = HomematicDaemon.GetDevices();
        
        return Task.CompletedTask;
    }

    public void ToogleDetails(string deviceAddress)
    {
        this._areDetailsOpenByDeviceAddress[deviceAddress] = !AreDetailsOpen(deviceAddress);
    }

    public bool AreDetailsOpen(string deviceAddress)
    {
        return _areDetailsOpenByDeviceAddress.GetValueOrDefault(deviceAddress);
    }
}
